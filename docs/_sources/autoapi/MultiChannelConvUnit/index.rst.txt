:mod:`MultiChannelConvUnit`
===========================

.. py:module:: MultiChannelConvUnit


Module Contents
---------------


.. py:class:: MultiChannelConvUnit(**kwargs)

   Bases: :class:`ComponentClass.ComponentClass`

   This block gather n_inputs convolutional units receiveing n_inputs bus
   inputs concatenated in one port, the same for the outputs. The kernel, bias
   and batch normalization values ​​are provided inside this unit for each
   convolutional unit input, except the control signs comes from a external
   control unit. Therefore, this constant values are updated to the
   convolutional units just in the right cicles. The same happens with the
   convolution units signs, so, the convolution units at principle runs
   synchronous with each other.

   The output port of this block is the result of the multichannel convolution
   operation with different kernel values and input channels. After the
   individual process of convolution between kernel values and input channels,
   the results are normalized and added with a bias value. Before the output
   be updated, the value pass in a leaky relu activation function.

   :param clk: clock signal
   :type clk: std_logic
   :param reset: reset signal
   :type reset: std_logic
   :param en_mult: enable signal
   :type en_mult: std_logic
   :param en_sum: enable signal
   :type en_sum: std_logic
   :param input: vector with the nine input values cancatenated, each value     should be an signed value with 16 bits width
   :type input: std_logic_vector
   :param output: the output value of the convolutions
   :type output: unsigned

   .. method:: get_signals(self)



   .. method:: rtl(self, clk, reset, input, output, en_mult, en_sum, en_channel, en_batch, en_act)




.. data:: name
   

   

