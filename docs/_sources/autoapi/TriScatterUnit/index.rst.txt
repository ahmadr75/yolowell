:mod:`TriScatterUnit`
=====================

.. py:module:: TriScatterUnit


Module Contents
---------------


.. py:class:: TriScatterUnit(input_size=0, **kwargs)

   Bases: :class:`ComponentClass.ComponentClass`

   This block implements a unit to fill the inputs of a ConvUnit block. Nine
   outputs are provided for this cause. Four line buffers are implemented
   receiveing the outputs from the predecessor layer with four modes to read
   and write. The read and write mode define which line buffer will be used to
   write the outputs of the last layer. The three line buffers remaining are
   used to fill the registers outputs.

   :param input_size: size of the line_buffers of this unit.
   :type input_size: int

   .. method:: rtl(self, clk, reset, input_counter, input, output_counter, output, en_zero, mode, en_read, en_write)


      This function implements the combinational and sequential blocks of
      this block.

      :param clk: clock signal
      :type clk: std_logic
      :param reset: reset signal
      :type reset: std_logic
      :param en_zero: enable signal
      :type en_zero: std_logic
      :param en_read: enable signal
      :type en_read: std_logic
      :param input: vector with the input value with 16 bits width
      :type input: std_logic_vector
      :param output: the nine output values of the concatenated
      :type output: std_logic_vector
      :return: the logic implemented in this block
      :rtype: a method with @block decorator


   .. method:: get_signals(self)


      This function returns the signals necessairly to instantiate the rtl
      block and convert the python method to a vhdl file.

      :return: a dict specifying the input and outputs signals of the block.
      :rtype: dict of myhdl.Signal


      **Python definition of the input and ouputs:**

      .. code-block:: python

          def get_signals(self):
              return {
                  "clk": Signal(False),
                  "reset": ResetSignal(0, active=1, isasync=1),
                  "input": Signal(intbv(0)[16:]),
                  "input_counter": Signal(intbv(0)[self.counter_size:]),
                  "output": Signal(intbv(0)[self.n_outputs*16:]),
                  "output_counter": Signal(intbv(0)
                                           [self.size*self.counter_size:]),
                  "en_zero": Signal(False),
                  "mode": Signal(intbv(0)[self.size+1:]),
                  "en_read": Signal(False),
                  "en_write": Signal(False)
              }

      **VHDL component generated:**

      .. code-block:: vhdl

          component TriScatterUnit is
              port (
                  clk            : in  std_logic;
                  reset          : in  std_logic;
                  en_zero        : in  std_logic;
                  en_read        : in  std_logic;
                  en_write       : in  std_logic;
                  mode           : in  unsigned(3 downto 0);
                  input_counter  : in  unsigned(8 downto 0);
                  input          : in  unsigned(15 downto 0);
                  output_counter : in  unsigned(26 downto 0);
                  output         : out unsigned(143 downto 0)
              );
          end component TriScatterUnit;



.. data:: name
   

   

